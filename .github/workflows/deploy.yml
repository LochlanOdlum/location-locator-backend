name: CI & Deploy to AWS

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  ci:
    name: âœ… CI Checks
    runs-on: ubuntu-latest
    outputs:
      ci-passed: ${{ steps.ci-checks.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Check import order (isort)
        working-directory: backend
        run: isort . --check --diff

      - name: Check formatting (black)
        working-directory: backend
        run: black . --check

      - name: Lint (flake8)
        working-directory: backend
        run: flake8 .

      - name: Unit tests (pytest)
        working-directory: backend
        run: pytest --maxfail=1 --disable-warnings -q

      # Expose a step outcome so we can gate the deploy job
      - name: All CI checks passed
        id: ci-checks
        run: echo "ci=success"
        # if any of the above failed, this step will not run and the job will be marked failure

  deploy:
    name: ðŸš€ Deploy to AWS
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' # only on direct pushes, not on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci

      - name: Deploy CDK stack (builds image and uploads to ECR)
        run: |
          cd cdk
          npx cdk deploy --require-approval never
